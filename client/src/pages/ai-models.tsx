
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { 
  Brain, 
  Image, 
  FileText, 
  CheckCircle, 
  Code, 
  Mic, 
  Video,
  Zap,
  Download,
  Copy,
  Sparkles,
  Settings,
  Play,
  Pause,
  RefreshCw
} from "lucide-react";
import { useState, useEffect } from "react";
import { useWallet } from "@/hooks/use-wallet";
import { useToast } from "@/hooks/use-toast";

// Helper function for generating mock responses
function generateMockResponse(category: string, prompt: string): string {
  const timestamp = new Date().toLocaleString();
  const processingId = Math.random().toString(36).substr(2, 9);

  switch (category) {
    case 'text':
      return `🤖 AI Text Generation\n\nPrompt: "${prompt}"\n\n✨ Analysis Complete\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nBased on advanced language processing, I've generated a comprehensive response to your query. This AI model specializes in natural language understanding and generation.\n\n📊 Response Details:\n• Processing time: ${Math.floor(Math.random() * 2000 + 1000)}ms\n• Confidence score: ${Math.floor(Math.random() * 20 + 80)}%\n• Model version: GPT-Advanced-v3.2\n\n🎯 Generated Content:\nYour request has been processed through multiple layers of neural networks, ensuring accurate and contextually relevant output. The AI model has analyzed semantic patterns and generated content that aligns with your specific requirements.\n\n⚡ Processing ID: ${processingId}\n📅 Generated: ${timestamp}`;

    case 'image':
      return `🎨 AI Image Generation\n\nPrompt: "${prompt}"\n\n✨ Generation Complete\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🖼️ Image Specifications:\n• Resolution: 1024x1024 pixels\n• Style: Photorealistic\n• Generation method: Diffusion model\n• Inference steps: 50\n\n⚙️ Technical Details:\n• Generation time: ${Math.floor(Math.random() * 15000 + 5000)}ms\n• GPU utilization: ${Math.floor(Math.random() * 30 + 70)}%\n• Memory usage: 8.2GB VRAM\n• Quality score: 9.${Math.floor(Math.random() * 8) + 2}/10\n\n📁 Output: ai_generated_${processingId}.png\n⚡ Processing ID: ${processingId}\n📅 Generated: ${timestamp}`;

    case 'code':
      return `💻 AI Code Generation\n\nRequest: "${prompt}"\n\n✨ Code Generation Complete\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\`\`\`javascript\n// Generated by AI Code Assistant\n// Optimized for production use\n\nfunction processUserRequest(input) {\n  const timestamp = new Date();\n  const processedData = {\n    id: '${processingId}',\n    input: input,\n    timestamp: timestamp,\n    status: 'processed'\n  };\n  \n  return processedData;\n}\n\n// Enhanced with error handling\ntry {\n  const result = processUserRequest('${prompt.substring(0, 20)}...');\n  console.log('Processing complete:', result);\n} catch (error) {\n  console.error('Processing failed:', error);\n}\n\`\`\`\n\n📊 Code Quality:\n• Syntax validation: ✅ Passed\n• Best practices: ✅ Applied\n• Performance optimized: ✅ Verified\n• Security checked: ✅ Clean\n\n⚡ Processing ID: ${processingId}\n📅 Generated: ${timestamp}`;

    default:
      return `🤖 AI Processing Complete\n\nQuery: "${prompt}"\n\n✨ Processing Complete\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nYour request has been processed by our advanced AI system. The model has analyzed your input and generated a comprehensive response based on trained neural networks.\n\n📊 Processing Statistics:\n• Response time: ${Math.floor(Math.random() * 3000 + 1000)}ms\n• Accuracy: ${Math.floor(Math.random() * 20 + 80)}%\n• Model confidence: High\n• Processing nodes: 4\n\n🌐 AI Insights:\nThe system has successfully interpreted your request and provided relevant output. All processing has been completed according to safety guidelines and best practices.\n\n⚡ Processing ID: ${processingId}\n📅 Generated: ${timestamp}`;
  }
}

interface AIModel {
  id: string;
  name: string;
  category: string;
  description: string;
  capabilities: string[];
  status: 'available' | 'training' | 'offline';
  computeRequired: number;
  costPerUse: number;
  responseTime: string;
  accuracy: number;
}

interface GenerationResult {
  id: string;
  type: string;
  content: string;
  timestamp: Date;
  model: string;
  status: 'generating' | 'completed' | 'failed';
  progress?: number;
}

export default function AIModels() {
  const { isConnected, walletAddress } = useWallet();
  const { toast } = useToast();
  
  const [selectedModel, setSelectedModel] = useState<string>('');
  const [prompt, setPrompt] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [generationHistory, setGenerationHistory] = useState<GenerationResult[]>([]);

  // Clear generation history
  const clearHistory = () => {
    setGenerationHistory([]);
    localStorage.removeItem('ai-generation-history');
  };

  // Load history from localStorage on mount
  useEffect(() => {
    const saved = localStorage.getItem('ai-generation-history');
    if (saved) {
      try {
        setGenerationHistory(JSON.parse(saved));
      } catch (error) {
        console.error('Failed to load generation history:', error);
      }
    }
  }, []);

  // Save history to localStorage
  useEffect(() => {
    localStorage.setItem('ai-generation-history', JSON.stringify(generationHistory));
  }, [generationHistory]);
  const [activeTab, setActiveTab] = useState<string>('text');

  const aiModels: AIModel[] = [
    {
      id: 'stellarium-gpt-v2',
      name: 'Stellarium GPT v2',
      category: 'text',
      description: 'Advanced language model with astronomical knowledge base',
      capabilities: ['Writing', 'Analysis', 'Q&A', 'Summarization', 'Scientific Research'],
      status: 'available',
      computeRequired: 4,
      costPerUse: 0.01,
      responseTime: '2-5s',
      accuracy: 94
    },
    {
      id: 'stellar-vision',
      name: 'StellarVision',
      category: 'image',
      description: 'High-quality space imagery generation and editing model',
      capabilities: ['Space Image Generation', 'Astronomical Art', 'Image Enhancement', 'Scientific Visualization'],
      status: 'available',
      computeRequired: 8,
      costPerUse: 0.05,
      responseTime: '10-30s',
      accuracy: 97
    },
    {
      id: 'cosmos-coder',
      name: 'Cosmos Coder',
      category: 'code',
      description: 'Specialized coding assistant for space science applications',
      capabilities: ['Code Generation', 'Algorithm Optimization', 'Scientific Computing', 'Data Analysis'],
      status: 'available',
      computeRequired: 6,
      costPerUse: 0.02,
      responseTime: '3-8s',
      accuracy: 96
    },
    {
      id: 'fact-checker-pro',
      name: 'FactChecker Pro',
      category: 'analysis',
      description: 'Scientific fact checking with peer-review validation',
      capabilities: ['Scientific Verification', 'Source Validation', 'Research Analysis', 'Citation Checking'],
      status: 'available',
      computeRequired: 5,
      costPerUse: 0.03,
      responseTime: '5-15s',
      accuracy: 98
    },
    {
      id: 'audio-forge',
      name: 'AudioForge',
      category: 'audio',
      description: 'Advanced space audio processing and generation',
      capabilities: ['Space Audio Synthesis', 'Signal Processing', 'Communication Enhancement', 'Acoustic Modeling'],
      status: 'training',
      computeRequired: 10,
      costPerUse: 0.04,
      responseTime: '15-45s',
      accuracy: 89
    },
    {
      id: 'exoplanet-classifier',
      name: 'Exoplanet Classifier',
      category: 'analysis',
      description: 'Neural network for exoplanet detection and classification',
      capabilities: ['Transit Detection', 'Planet Classification', 'Habitability Assessment', 'Signal Analysis'],
      status: 'available',
      computeRequired: 12,
      costPerUse: 0.06,
      responseTime: '8-20s',
      accuracy: 92
    },
    {
      id: 'stellar-synthesis',
      name: 'Stellar Synthesis',
      category: 'text',
      description: 'Multimodal AI combining text, image, and data analysis',
      capabilities: ['Multimodal Analysis', 'Cross-Domain Correlation', 'Pattern Recognition', 'Predictive Modeling'],
      status: 'training',
      computeRequired: 16,
      costPerUse: 0.08,
      responseTime: '20-60s',
      accuracy: 91
    },
    {
      id: 'quantum-simulator',
      name: 'Quantum Simulator',
      category: 'analysis',
      description: 'Quantum mechanical simulation for space-time physics',
      capabilities: ['Quantum Simulation', 'Physics Modeling', 'Spacetime Analysis', 'Cosmic Phenomena'],
      status: 'available',
      computeRequired: 20,
      costPerUse: 0.12,
      responseTime: '60-180s',
      accuracy: 94
    }
  ];

  const getModelsByCategory = (category: string) => {
    return aiModels.filter(model => model.category === category);
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'text': return <FileText className="w-5 h-5" />;
      case 'image': return <Image className="w-5 h-5" />;
      case 'code': return <Code className="w-5 h-5" />;
      case 'analysis': return <CheckCircle className="w-5 h-5" />;
      case 'audio': return <Mic className="w-5 h-5" />;
      default: return <Brain className="w-5 h-5" />;
    }
  };

  const handleGenerate = async () => {
    if (!selectedModel || !prompt.trim()) {
      toast({
        title: "Missing Information",
        description: "Please select a model and enter a prompt.",
        variant: "destructive"
      });
      return;
    }

    if (!isConnected) {
      toast({
        title: "Wallet Required",
        description: "Please connect your wallet to use AI models.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    const model = aiModels.find(m => m.id === selectedModel);
    
    const newGeneration: GenerationResult = {
      id: Date.now().toString(),
      type: model?.category || 'text',
      content: '',
      timestamp: new Date(),
      model: model?.name || '',
      status: 'generating',
      progress: 0
    };

    setGenerationHistory(prev => [newGeneration, ...prev]);

    try {
      // Simulate API call to AI model
      const response = await fetch('/api/ai/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          modelId: selectedModel,
          prompt: prompt,
          walletAddress: walletAddress
        })
      });

      if (response.ok) {
        const result = await response.json();
        
        // Simulate progress updates
        let progress = 0;
        const progressInterval = setInterval(() => {
          progress += Math.random() * 20;
          if (progress >= 100) {
            progress = 100;
            clearInterval(progressInterval);
            
            setGenerationHistory(prev => 
              prev.map(gen => 
                gen.id === newGeneration.id 
                  ? { 
                      ...gen, 
                      status: 'completed', 
                      content: result.content || 'AI generation completed successfully.',
                      progress: 100 
                    }
                  : gen
              )
            );
            setIsGenerating(false);
          } else {
            setGenerationHistory(prev => 
              prev.map(gen => 
                gen.id === newGeneration.id 
                  ? { ...gen, progress }
                  : gen
              )
            );
          }
        }, 500);
      } else {
        throw new Error('Generation failed');
      }
    } catch (error) {
      setGenerationHistory(prev => 
        prev.map(gen => 
          gen.id === newGeneration.id 
            ? { ...gen, status: 'failed', content: 'Generation failed. Please try again.' }
            : gen
        )
      );
      setIsGenerating(false);
      toast({
        title: "Generation Failed",
        description: "There was an error generating your content. Please try again.",
        variant: "destructive"
      });
    }

    setPrompt('');
  };

  

  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: "Copied!",
      description: "Content copied to clipboard.",
    });
  };

  return (
    <div className="space-y-8">
      <Card className="glass-card rounded-xl border-primary/10">
        <CardHeader>
          <CardTitle className="text-3xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            AI Model Playground
          </CardTitle>
          <p className="text-center text-muted-foreground">
            Interact with our trained AI models for various tasks and applications
          </p>
        </CardHeader>
      </Card>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="text" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Text
          </TabsTrigger>
          <TabsTrigger value="image" className="flex items-center gap-2">
            <Image className="w-4 h-4" />
            Image
          </TabsTrigger>
          <TabsTrigger value="code" className="flex items-center gap-2">
            <Code className="w-4 h-4" />
            Code
          </TabsTrigger>
          <TabsTrigger value="analysis" className="flex items-center gap-2">
            <CheckCircle className="w-4 h-4" />
            Analysis
          </TabsTrigger>
          <TabsTrigger value="audio" className="flex items-center gap-2">
            <Mic className="w-4 h-4" />
            Audio
          </TabsTrigger>
        </TabsList>

        {['text', 'image', 'code', 'analysis', 'audio'].map((category) => (
          <TabsContent key={category} value={category} className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {getModelsByCategory(category).map((model) => (
                <Card key={model.id} className="glass-card border-primary/20 hover:border-primary/50 transition-colors">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        {getCategoryIcon(model.category)}
                        <CardTitle className="text-lg">{model.name}</CardTitle>
                      </div>
                      <Badge 
                        className={`${
                          model.status === 'available' ? 'bg-green-400/20 text-green-400' :
                          model.status === 'training' ? 'bg-yellow-400/20 text-yellow-400' :
                          'bg-gray-400/20 text-gray-400'
                        }`}
                      >
                        {model.status.toUpperCase()}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-sm text-muted-foreground">{model.description}</p>

                    <div className="space-y-2">
                      <span className="text-sm font-medium">Capabilities:</span>
                      <div className="flex flex-wrap gap-1">
                        {model.capabilities.map((cap, idx) => (
                          <Badge key={idx} variant="outline" className="text-xs">
                            {cap}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-muted-foreground">Cost:</span>
                        <div>${model.costPerUse} $ASTRA</div>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Response:</span>
                        <div>{model.responseTime}</div>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Accuracy:</span>
                        <div>{model.accuracy}%</div>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Compute:</span>
                        <div>{model.computeRequired} cores</div>
                      </div>
                    </div>

                    <Button 
                      onClick={() => setSelectedModel(model.id)}
                      disabled={model.status !== 'available'}
                      className="w-full"
                      variant={selectedModel === model.id ? "default" : "outline"}
                    >
                      {selectedModel === model.id ? 'Selected' : 'Select Model'}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>

            {getModelsByCategory(category).length > 0 && (
              <Card className="glass-card border-primary/20">
                <CardHeader>
                  <CardTitle>Generate with {category.charAt(0).toUpperCase() + category.slice(1)} AI</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="model-select">Selected Model</Label>
                    <Select value={selectedModel} onValueChange={setSelectedModel}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select an AI model" />
                      </SelectTrigger>
                      <SelectContent>
                        {getModelsByCategory(category).map((model) => (
                          <SelectItem 
                            key={model.id} 
                            value={model.id}
                            disabled={model.status !== 'available'}
                          >
                            {model.name} - ${model.costPerUse} $ASTRA
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="prompt">
                      {category === 'image' ? 'Image Description' : 
                       category === 'code' ? 'Code Requirements' :
                       category === 'analysis' ? 'Statement to Verify' :
                       category === 'audio' ? 'Audio Description' :
                       'Prompt'}
                    </Label>
                    <Textarea
                      id="prompt"
                      placeholder={
                        category === 'image' ? 'Describe the image you want to generate...' :
                        category === 'code' ? 'Describe what code you need...' :
                        category === 'analysis' ? 'Enter the statement you want to fact-check...' :
                        category === 'audio' ? 'Describe the audio you want to generate...' :
                        'Enter your prompt here...'
                      }
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      rows={3}
                    />
                  </div>

                  <Button 
                    onClick={handleGenerate}
                    disabled={!selectedModel || !prompt.trim() || isGenerating || !isConnected}
                    className="w-full"
                  >
                    {isGenerating ? (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Sparkles className="w-4 h-4 mr-2" />
                        Generate
                      </>
                    )}
                  </Button>

                  {!isConnected && (
                    <p className="text-center text-sm text-muted-foreground">
                      Connect your wallet to use AI models
                    </p>
                  )}
                </CardContent>
              </Card>
            )}
          </TabsContent>
        ))}
      </Tabs>

      {generationHistory.length > 0 && (
        <Card className="glass-card border-primary/20">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Generation History</CardTitle>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={clearHistory}
              className="text-red-400 border-red-400/20 hover:bg-red-400/10"
            >
              Clear History
            </Button>
          </CardHeader>
          <CardContent className="space-y-4">
            {generationHistory.map((result) => (
              <div key={result.id} className="border border-primary/10 rounded-lg p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {getCategoryIcon(result.type)}
                    <span className="font-medium">{result.model}</span>
                    <Badge 
                      className={`${
                        result.status === 'completed' ? 'bg-green-400/20 text-green-400' :
                        result.status === 'generating' ? 'bg-yellow-400/20 text-yellow-400' :
                        'bg-red-400/20 text-red-400'
                      }`}
                    >
                      {result.status.toUpperCase()}
                    </Badge>
                  </div>
                  <span className="text-sm text-muted-foreground">
                    {new Date(result.timestamp).toLocaleTimeString()}
                  </span>
                </div>

                {result.status === 'generating' && result.progress !== undefined && (
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Progress</span>
                      <span>{result.progress.toFixed(0)}%</span>
                    </div>
                    <Progress value={result.progress} className="h-2" />
                  </div>
                )}

                {result.content && (
                  <div className="space-y-2">
                    <div className="bg-muted/20 rounded-lg p-3 text-sm font-mono whitespace-pre-wrap">
                      {result.content}
                    </div>
                    {result.status === 'completed' && (
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(result.content)}
                        >
                          <Copy className="w-4 h-4 mr-1" />
                          Copy
                        </Button>
                        {result.type === 'image' || result.type === 'audio' ? (
                          <Button variant="outline" size="sm">
                            <Download className="w-4 h-4 mr-1" />
                            Download
                          </Button>
                        ) : null}
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
